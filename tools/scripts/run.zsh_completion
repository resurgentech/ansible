#compdef run

COMPLETION_DEBUG=${COMPLETION_DEBUG:-0}

# Logs debug messages if COMPLETION_DEBUG is enabled.
# Parameters:
#   $* - Message to log
# Output:
#   Logs to COMPLETION_DEBUG_OUTPUT or stderr.
debug_log() {
    if (( COMPLETION_DEBUG )); then
        if [ -n "$COMPLETION_DEBUG_OUTPUT" ]; then
            echo "[DEBUG] $*" >> $COMPLETION_DEBUG_OUTPUT
        else
            echo "[DEBUG] $*" > /dev/stderr
        fi
    fi
}

# Handles completions for commands with targets and subcommands.
# Specifically tailored for projects in monorepos with multiple apps to automate building and deploying.
_builder_helper() {
    local cmd
    cmd="$words[1]"
    debug_log "Running _builder_helper for command: $cmd"

    local has_targets_and_commands=$("$cmd" has_targets 2>/dev/null)
    debug_log "has_targets_and_commands: $has_targets_and_commands"

    local target=""
    local command=""
    if [ -n "$has_targets_and_commands" ]; then
        if (( CURRENT > 1 )); then
            target="$words[2]"
        fi
        if (( CURRENT > 2 )); then
            command="$words[3]"
        fi

        _arguments \
            '--help[Show help message]' \
            '1:target:->target' \
            '2:command:->command' \
            '*::options:->options'
    else
        if (( CURRENT > 1 )); then
            command="$words[2]"
        fi

        _arguments \
            '--help[Show help message]' \
            '1:command:->command' \
            '*::options:->options'
    fi

    case $state in
        target)
            # Retrieve and describe valid targets
            local targets
            targets=()
            while IFS= read -r line; do
                targets+=("$line")
            done <<< "$("$cmd" list_valid_targets 2>/dev/null)"
            debug_log "Targets retrieved: ${targets[*]}"
            _describe 'Targets' targets
            ;;
        command)
            # Retrieve and describe valid commands based on the target
            local commands
            commands=()
            while IFS= read -r line; do
                commands+=("$line")
            done <<< "$("$cmd" list_valid_commands "$target" 2>/dev/null)"
            debug_log "Commands retrieved: ${commands[*]}"
            _describe 'Commands' commands
            ;;
        options)
            # Retrieve and describe valid flags
            local prev="$words[$CURRENT-1]"
            local flags
            flags=()
            while IFS= read -r line; do
                flags+=("$line")
            done <<< "$("$cmd" list_valid_flags "$command" "$target" 2>/dev/null)"
            debug_log "Flags retrieved: ${flags[*]}"
            while IFS= read -r line; do
                if [ -z "$line" ]; then
                    continue
                fi
                IFS=':' read -r option validcommand desc <<< "$line"
                IFS='=' read -r option_name arg_type <<< "$option"
                if [[ "$option_name" == "$prev" ]]; then
                    arg_type="${arg_type#*<}"       # Extract argument type
                    arg_type="${arg_type%%>*}"      # Trim the description
                    case "$arg_type" in
                        path)
                            _files
                            ;;
                        version)
                            _guard '^[0-9]+\.[0-9]+\.[0-9]+$' 'Please enter a valid version (e.g., 1.2.3)'
                            ;;
                        number)
                            _numbers
                            ;;
                        url)
                            _urls
                            ;;
                        *)
                            # Default to generic word completion
                            _generic
                            ;;
                    esac
                    flags=()
                    break
                else
                    flags+=("$option_name:$desc")
                fi
            done <<< "$("$cmd" list_valid_options "$command" "$target" 2>/dev/null)"
            if [ -n "$flags" ]; then
                _describe 'Flags' flags
            fi
            ;;
    esac
}

# Handles completions for commands with hierarchical subcommands.
# Designed for projects with multiple Ansible roles and playbooks to automate running Ansible tasks.
_ansible_helper() {
    local cmd
    cmd="$words[1]"
    debug_log "Running _ansible_helper for command: $cmd"

    local number_subcommands="0"
    if (( CURRENT > 1 )); then
        number_subcommands=$("$cmd" number_subcommands "$words[2]" 2>/dev/null)
        debug_log "Number of subcommands: $number_subcommands"
    fi

    local command=""
    local subcommand=""
    local subcommand2=""
    if [[ "$number_subcommands" == "2" ]]; then
        if (( CURRENT > 1 )); then
            command="$words[2]"
        fi
        if (( CURRENT > 2 )); then
            subcommand="$words[3]"
        fi
        if (( CURRENT > 3 )); then
            subcommand2="$words[4]"
        fi

        _arguments \
            '--help[Show help message]' \
            '1:command:->command' \
            '2:subcommand:->subcommand' \
            '3:subcommand2:->subcommand2' \
            '*::options:->options'
    elif [[ "$number_subcommands" == "1" ]]; then
        if (( CURRENT > 1 )); then
            command="$words[2]"
        fi
        if (( CURRENT > 2 )); then
            subcommand="$words[3]"
        fi

        _arguments \
            '--help[Show help message]' \
            '1:command:->command' \
            '2:subcommand:->subcommand' \
            '*::options:->options'
    elif [[ "$number_subcommands" == "0" ]]; then
        if (( CURRENT > 1 )); then
            command="$words[2]"
        fi

        _arguments \
            '--help[Show help message]' \
            '1:command:->command' \
            '*::options:->options'
    fi

    case $state in
        command)
            # Retrieve and describe valid commands
            local commands
            commands=()
            while IFS= read -r line; do
                commands+=("$line")
            done <<< "$("$cmd" list_valid_commands 2>/dev/null)"
            debug_log "Commands retrieved: ${commands[*]}"
            _describe 'Commands' commands
            ;;
        subcommand)
            # Retrieve and describe valid subcommands
            local subcommands
            subcommands=()
            while IFS= read -r line; do
                subcommands+=("$line")
            done <<< "$("$cmd" list_valid_subcommands "$command" 2>/dev/null)"
            debug_log "Subcommands retrieved: ${subcommands[*]}"
            _describe 'Subcommands' subcommands
            ;;
        subcommand2)
            # Retrieve and describe valid sub-subcommands
            local subcommands2
            subcommands2=()
            while IFS= read -r line; do
                subcommands2+=("$line")
            done <<< "$("$cmd" list_valid_subcommands "$command" "$subcommand" 2>/dev/null)"
            debug_log "Subcommands2 retrieved: ${subcommands2[*]}"
            _describe 'Subcommands' subcommands2
            ;;
        options)
            # Retrieve and describe valid flags
            local prev="$words[$CURRENT-1]"
            local flags
            flags=()
            while IFS= read -r line; do
                flags+=("$line")
            done <<< "$("$cmd" list_valid_flags "$command" 2>/dev/null)"
            debug_log "Flags retrieved: ${flags[*]}"
            while IFS= read -r line; do
                if [ -z "$line" ]; then
                    continue
                fi
                IFS=':' read -r option desc <<< "$line"
                IFS='=' read -r option_name arg_type <<< "$option"
                arg_type="${arg_type#*<}"       # Extract argument type
                arg_type="${arg_type%%>*}"      # Trim the description
                flags+=("$option_name:=<$arg_type> $desc")
            done <<< "$("$cmd" list_valid_options "$command" 2>/dev/null)"
            if [ -n "$flags" ]; then
                _describe 'Flags' flags
            fi
            ;;
    esac
}

# Entry point for the `run` command completions.
_run() {
    local cmd
    cmd="$words[1]"
    debug_log "Running _run for command: $cmd"

    # Ensure the command exists
    if ! type "$cmd" &>/dev/null; then
        debug_log "Command not found: $cmd"
        return 0
    fi

    # Determine which helper to use based on the command's behavior
    local is_magic_run_script=$("$cmd" is_magic_run_script 2>/dev/null)
    debug_log "is_magic_run_script result: $is_magic_run_script"
    if [[ "$is_magic_run_script" == "builder_helper" ]]; then
        debug_log "Using _builder_helper for command: $cmd"
        _builder_helper
    elif [[ "$is_magic_run_script" == "ansible_helper" ]]; then
        debug_log "Using _ansible_helper for command: $cmd"
        _ansible_helper
    else
        debug_log "No helper found for command: $cmd"
        return 0
    fi
}

# Associate the _run function with the run command
compdef _run run
